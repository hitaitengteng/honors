--------------------------------------------------------------------------- 
File: 0.README.GANTT
Author: William Gantt
Date: Thu Jul 14 2016
Description: Documentation for version 2.0 of the module inference code.
--------------------------------------------------------------------------- 


---------------------------------------------------------------------------
FIRST THINGS
---------------------------------------------------------------------------

The basis for this code is John Grefenstette's Genesis code (Copyright
1990). His documentation can be found in most of the files in this
directory. Clare has also written a couple files outlining and summarizing
various aspects of Genesis, though the extent to which she has modified the
code remains unclear to me. I am using Genesis for my project because it is,
as far as I am told, the only decent, freely available GA code written in C.

All of the code that I have added may be found in the following files:

	utilities.h
	utilities.c
	instance.h
	instance.c
	instanceSet.h
	instanceSet.c
	motif.h
	motif.c
	window.h
	window.c
	GANTT_eval_v2.0.c

To anyone interested in understanding how the module inference program
works, the above listing is the order in which I recommend you read
the documentation. You may also find it helpful to refer back to previous
files as you go along (utilities.h and utilities.c in particular). 

---------------------------------------------------------------------------
GENERAL DESCRIPTION OF FILES AND LINKING STRUCTURE
---------------------------------------------------------------------------

The linking structure for the files is as follows (where the arrow means
"includes"):

GANTT_eval_v2.0.c

      |
      v

   window.h

      |
      v

    motif.h

      |
      v

 instanceSet.h

      |
      v

  instance.h

      |
      v

  utilities.h

			*		*		*

utilities.h/.c

    - all includes and named constants for the rest of the module
      inference program
    - several functions that are used in multiple other source files 
      (e.g. memory allocation functions)

instance.h/.c

    - the type definition for the instance struct, which stores
      information about a single instance of a motif in a sequence
    - simple functions for initializing and freeing the instance
      struct

instanceSet.h/.c

    - the type definition for the isntanceSet struct, which stores
      information about all of the instances of a motif on a single
      sequence
    - functions for initializing an instanceSet struct, both
      randomly and with user-specified values
    - functions for copying and freeing an instanceSet struct

motif.h/.c

    - the type definition for the motif struct, which stores 
      information about all of the instances of that motif in all 
      of the sequences (instanceSet structs) in which it occurs 
    - functions for initializing a motif struct and arrays of motif
      structs, both randomly and with user-specified values
    - functions for freeing and copying a motif struct, and printing out 
      information about it 

window.h/.c

    - the type definition for the window struct, which is the
      program's representation of a module. It consits of a
      beginning index, a length, an array of the motifs it
      contains, the total number of motifs being considered,
      and an overall score
    - functions for initializing, copying, and freeing windows
      and arrays of window
    - a function that, given a motif and a window, determines the
      number of the motif's base pairs that fall within the window 
    - a function to determine the best modules in a sequence
    - a function that prints out information about the best modules
      in a sequence

GANTT_eval_v2.0.c

    - the evaluation function

---------------------------------------------------------------------------
PURPOSE
---------------------------------------------------------------------------

The purpose of my project is to develop a tool for inferring good
candidate cis-regulatory modules (CRMs) using the output from GAMI.

---------------------------------------------------------------------------
METHODOLOGY                                                               
---------------------------------------------------------------------------

In its current instantiation, the program does this by identifying a user-
specified number of candidate modules in each genomic sequence of interest.
This is the task of the findBestModules function, which does not involve a
GA, but uses a window to iterate through the sequence. In the function,
windows are evaluated according to the number of motifs they contain that
GAMI has identified as "well-conserved." The function does count motifs
that may fall partially outside the bounds of the window, but the
contribution of these motifs to the overall window score is diminished
in proprtion to how far they extend beyond the window.

Once a set of windows ("modules") has been identified for each sequence,
the evaluation function is run. The idea is that once we have sets of
candidate modules for each species, we can identify some subset of the
motifs GAMI has deemed well-conserved that appear in the candidate
modules of the greatest number of species. This is done with the Genesis
genetic algorithm. Relying on the underlying principle that conservation 
is an indication of functionality, we can then use this subset of motifs 
as a standard by which to judge the candidate modules in each species. 
The more motifs a given module contains from the standard, the fitter
that module is as a candidate.

Right now, the evaluation function only identifies the motifs best-
conserved in the candidate modules of different species, but does not
then evaluate the modules themselves. This is something to work on.

---------------------------------------------------------------------------
SUGGESTIONS FOR FURTHER WORK
---------------------------------------------------------------------------

All suggestions for future improvements to the program may be found in

	improvements_needed.txt

in this directory.
